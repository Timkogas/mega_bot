import TelegramBot, { CallbackQuery, InlineKeyboardButton, Message } from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import Logger from '../Logger/Logger';
import path from 'path';
import Helper from './Helper';
import { IUserDb } from '../Db/IUserDb';

dotenv.config();
process.env["NTBA_FIX_350"] = '1';

enum EMessages {
    START = 'start',
    START_SHORT = 'start_short',
    MENU = 'menu',
    ABOUT = 'about',
    NOT_WANTED = 'not_wanted',

    TASKS = 'tasks',
    INVITE = 'invite',
    PRIZES = 'prizes'
}

export default class TelegramBotApp {
    private bot: TelegramBot;

    constructor() {
        this._init()
    }

    private async _init(): Promise<void> {
        const token = process.env.TG_TOKEN
        try {
            this.bot = await new TelegramBot(token, { polling: true });
            Logger.debug('[BOT] started')
        } catch (e) {
            Logger.error('[BOT] started error', e)
        }
        this._setupListeners();
    }

    private _setupListeners(): void {
        try {
            this.bot.on('message', async (message) => {
                const tgUser = message.from
                const dbUser = await Helper.checkUser(tgUser)

                const text = message.text
                const chatId = message.chat.id

                if (text.includes('/start')) {
                    return await this._sendMessageOnStart(chatId, dbUser)
                }

                return await this._sendMessageOnNoCommand(chatId, dbUser)
            })


            this.bot.on('callback_query', async (callbackQuery) => this._handleCallbackQuery(callbackQuery));
        } catch (e) {
            Logger.error('[BOT] setupListeners error', e)
        }
    }

    private async _handleCallbackQuery(callbackQuery: CallbackQuery): Promise<void> {
        const { data, message, from } = callbackQuery;

        const tgUser = from
        const dbUser = await Helper.checkUser(tgUser)

        const chatId = message.chat.id

        switch (data) {
            case EMessages.START:
                return await this._sendMessageOnStart(chatId, dbUser)
            case EMessages.START_SHORT:
                return await this._sendMessageOnStart(chatId, dbUser, true)
            case EMessages.ABOUT:
                return await this._sendMessageOnAbout(chatId, dbUser)
            case EMessages.NOT_WANTED:
                return await this._sendMessageOnNotWanted(chatId, dbUser)
            case EMessages.MENU:
                return await this._sendMessageOnMenu(chatId, dbUser)
            case EMessages.PRIZES:
                return await this._sendMessageOnPrizes(chatId, dbUser)
            case EMessages.INVITE:
                return await this._sendMessageOnInvite(chatId, dbUser)
            case EMessages.TASKS:
                return await this._sendMessageOnTasks(chatId, dbUser)

        }
    }


    private async _sendMessageOnNoCommand(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const text = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.`
            const buttons = await Helper.getButtons(dbUser.id)

            if (buttons === null) {
                await this.bot.sendMessage(chatId, text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [[{ text: '–°—Ç–∞—Ä—Ç', callback_data: EMessages.START }]],
                    }
                })
            } else {
                await this.bot.sendMessage(chatId, text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: buttons,
                    }
                })
            }

        } catch (e) {
            Logger.error('[BOT] sendMessageOnNoCommand error', e)
        }
    }

    private async _sendMessageOnStart(chatId: number, dbUser: IUserDb, short?: boolean): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)', callback_data: EMessages.MENU }],
                [{ text: '–û–± –∞–∫—Ü–∏–∏', callback_data: EMessages.ABOUT }],
                [{ text: '–ù–µ —Ö–æ—á—É', callback_data: EMessages.NOT_WANTED }]
            ]

            const textFirstMessage = `üëãüèª –ü—Ä–∏–≤–µ—Ç!\n\n–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –≤ –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å ‚Äî –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —ç–∫–æ-–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, —Ä–∞—Å–∫—Ä–æ–π –≤—Å–µ —Ç–∞–π–Ω—ã —ç–∫–æ–ø–æ–ª–∏—Å–∞ –∏ <b>–ø–æ–ª—É—á–∏ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—É—Ç–µ–≤–∫—É –Ω–∞ –¥–≤–æ–∏—Ö –≤ —ç–∫–æ-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –£—Ä–∞–ª—É</b>, –∞ —Ç–∞–∫–∂–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ üíö`
            const textSecondMessage = `‚úÖ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–ª–µ–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è <a href='https://mega.ru/loyalty_rules/ekaterinburg/?att=1'>–ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ MEGA Friends</a> –∏ <a href='https://mega.ru/loyalty_rules/ekaterinburg/?att=1'>–ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ü–∏–∏</a>.`

            if (short) {
                await this.bot.sendMessage(chatId, textSecondMessage, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        inline_keyboard: buttons,
                    }
                })
            } else {
                await this.bot.sendVideo(chatId, videoPath)
                await this.bot.sendMessage(chatId, textFirstMessage, { parse_mode: 'HTML' })
                await this.bot.sendMessage(chatId, textSecondMessage, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        inline_keyboard: buttons,
                    }
                })
            }

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnStart error', e)
        }
    }


    private async _sendMessageOnAbout(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')
            const imgPath = path.join(__dirname, '../assets/images/img1.jpg')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.START_SHORT }],
            ]

            const text = `üåç <b>¬´–ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å¬ª</b> ‚Äî –∞–∫—Ü–∏—è –æ—Ç –ú–ï–ì–ò –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ø–æ—Å–≤—è—â–µ–Ω–Ω–∞—è –∑–∞–±–æ—Ç–µ –æ –ø–ª–∞–Ω–µ—Ç–µ –∏ –ª—é–¥—è—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã, —É—Å–ª—É–≥–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –≤ —Ü–µ–Ω—Ç—Ä–∞—Ö.\n\n–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–π –∞–∫—Ü–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 5 –∑–∞–¥–∞–Ω–∏–π:\n1. –ó–∞–¥–∞–Ω–∏–µ 1. –†–∞–∑–¥–µ–ª—è–π —Å –ú–ï–ì–û–ô\n2. –ó–∞–¥–∞–Ω–∏–µ 2. –ú–ï–ì–ê –ú–µ—Å—Ç–æ\n3. –ó–∞–¥–∞–Ω–∏–µ 3. –ú–ï–ì–ê –°—Ç–∞–Ω—Ü–∏—è\n4. –ó–∞–¥–∞–Ω–∏–µ 4. –ú–ï–ì–ê –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n5. –ó–∞–¥–∞–Ω–∏–µ 4. –ú–ï–ì–ê –≠–∫–æ —à–æ–ø–∏–Ω–≥\n\n–ó–∞ –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∏–≥—Ä–æ–≤—ã–µ –±–∞–ª–ª—ã. –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –∏ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ <a href='https://ru.wikipedia.org/wiki/%D0%A1%D1%81%D1%8B%D0%BB%D0%BA%D0%B0'>–ø—Ä–∞–≤–∏–ª–∞–º–∏ –∞–∫—Ü–∏–∏.</a>\n\n<i>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∞–∫—Ü–∏–∏ ‚Äî –û–û–û ¬´–Æ—Ä–ª–∏—Ü–æ¬ª. –†–µ–∫–≤–∏–∑–∏—Ç—ã</i>\n\n¬© –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã`

            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendPhoto(chatId, imgPath, {
                caption: text,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnAbout error', e)
        }
    }

    private async _sendMessageOnNotWanted(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)', callback_data: EMessages.MENU }],
                [{ text: '–û–± –∞–∫—Ü–∏–∏', callback_data: EMessages.ABOUT }],
                [{ text: '–ù–µ —Ö–æ—á—É', callback_data: EMessages.NOT_WANTED }],
            ]

            const text = `–í –Ω–∞—à–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ. –¢—ã –º–æ–∂–µ—à—å <b>–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%81%D1%8B%D0%BB%D0%BA%D0%B0">–ø—Ä–∞–≤–∏–ª–∞–º–∏</a></b> –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ: –∏–≥—Ä–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç üßê\n\nüîí <b>–£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º.</b> –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å —á–∞—Ç-–±–æ—Ç–æ–º ¬´–î–æ–≤–µ—Ä—å—Å—è –ú–ï–ì–ï. –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –≤ –≠–∫–æ–ø–æ–ª–∏—Å¬ª, –≤ –ø–æ–ª—å–∑—É —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü.`

            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnNotWanted error', e)
        }
    }

    private async _sendMessageOnMenu(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ó–∞–¥–∞–Ω–∏—è', callback_data: EMessages.TASKS }],
                [{ text: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data: EMessages.INVITE }],
                [{ text: '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤', web_app: { url: 'https://ya.ru' } }],
                [{ text: '–ü—Ä–∏–∑—ã', callback_data: EMessages.PRIZES }],
            ]

            const text = `‚úåÔ∏è<b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å!</b>\n\n–≠—Ç–æ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —á–∞—Ç-–±–æ—Ç—É. –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π. <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–¥–∞–Ω–∏—è¬ª üëá</b>\n\n–¢—ã –º–æ–∂–µ—à—å <b>–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π</b> ‚Äì –≤–º–µ—Å—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –ø—Ä–æ—Å—Ç–æ—Ä–∞–º –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å–∞ –≤–µ—Å–µ–ª–µ–µ! –ê —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏ —Å–∫–æ–ª—å–∫–æ –Ω–∞–±–∏—Ä–∞–µ—Ç –±–∞–ª–ª–æ–≤, –æ–±—Ä–∞—â–∞–π—Å—è –∫ ¬´–¢–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤¬ª.\n\n–î–æ–≤–µ—Ä—å—Å—è –ú–ï–ì–ï! üíï`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnMenu error', e)
        }
    }

    private async _sendMessageOnPrizes(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∞–∫—Ü–∏–∏ ¬´–ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å¬ª —Å–º–æ–≥—É—Ç –ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚Äî <b>—Å–∫–∞–∑–æ—á–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ –∏ —ç–∫–æ-—Ç—É—Ä –ø–æ –£—Ä–∞–ª—É –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏</b> ‚õ∞Ô∏èüå≤‚ùÑÔ∏è\n\n–¢–æ–ø-50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã:\n ‚Ä¢ –ü—Ä–∏–∑1\n ‚Ä¢ –ü—Ä–∏–∑2\n ‚Ä¢ –ü—Ä–∏–∑3\n ‚Ä¢ –ü—Ä–∏–∑4\n ‚Ä¢ –ü—Ä–∏–∑5\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏ –ø—Ä–∏–∑–µ—Ä—ã –±—É–¥—É—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±—ä—è–≤–ª–µ–Ω—ã 23 –¥–µ–∫–∞–±—Ä—è –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–º –∫–æ–Ω—Ü–µ—Ä—Ç–µ –≤ –ú–ï–ì–ï —Å —É—á–∞—Å—Ç–∏–µ–º –Ω–∞—à–µ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ ‚Äì –ú–∞—Ä–∏—Ç—ã –ü–ª–∏–µ–≤–æ–π.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∏ —á–∞—Ç-–±–æ—Ç–µ!`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnPrizes error', e)
        }
    }

    private async _sendMessageOnInvite(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `<b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –≤ –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É!\n\n–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\nüëâüèª <b>–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–∑—å—è–º.</b> –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–µ –±–æ–ª–µ–µ 10 —á–µ–ª–æ–≤–µ–∫;\nüëâüèª –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –∏–∑ –¥—Ä—É–∑–µ–π –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, —Ç–µ–±–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>5 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.</b>\n\n–í–æ—Ç —Å—Å—ã–ª–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π:\n<code>http://t.me/mega_ekb_bot?start=${dbUser.id}</code>`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnInvite error', e)
        }
    }

    private async _sendMessageOnTasks(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ö—Ä—É—Ç–æ! –£—á–∞—Å—Ç–≤—É—é!', callback_data: EMessages.MENU }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `ü§ï –ï–∂–µ–≥–æ–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –†–æ—Å—Å–∏–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è —Å–≤–∞–ª–æ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 250 000 –≥–µ–∫—Ç–∞—Ä–æ–≤! –°–æ—Ä—Ç–∏—Ä—É—è –∏ —Å–¥–∞–≤–∞—è –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏ –æ—Ç—Ö–æ–¥—ã, —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Å–æ—Ä–∞ –∏ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –∑–∞–±–æ—Ç–µ –æ –Ω–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç–µ.\n\n–ú–ï–ì–ê –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–µ —Å –ù–µ–º—É–∑–µ–µ–º –º—É—Å–æ—Ä–∞ –æ—Ç–∫—Ä—ã–ª–∞ —Å—Ç–∞–Ω—Ü–∏—é –ø–æ –ø—Ä–∏–µ–º—É –≤—Ç–æ—Ä—Å—ã—Ä—å—è. –ï—Å–ª–∏ —Ç—ã —É–∂–µ —Å–æ—Ä—Ç–∏—Ä—É–µ—à—å –æ—Ç—Ö–æ–¥—ã –¥–æ–º–∞, –ø—Ä–∏–Ω–æ—Å–∏ –∏—Ö –Ω–∞ –Ω–∞—à—É —Å—Ç–∞–Ω—Ü–∏—é. –ï—Å–ª–∏ —Ç—ã —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∏—á–æ–∫ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ: –≤—ã–¥–µ–ª–∏ —Ö–æ—Ç—è –±—ã 1 —Ñ—Ä–∞–∫—Ü–∏—é –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞ –∏–ª–∏ –ü–≠–¢-–±—É—Ç—ã–ª–∫–∏ –∏–∑-–ø–æ–¥ –≤–æ–¥—ã) –∏ –ø–æ–º–µ—Å—Ç–∏ –¥–∞–Ω–Ω—É—é —Ñ—Ä–∞–∫—Ü–∏—é –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏.\n\n–ê –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –æ–¥–µ–∂–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–∫–∏–Ω—É—Ç—å, —Ç–æ —Ç–µ–±–µ —Ç–æ—á–Ω–æ <b>–Ω—É–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏—é —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞</b>. –í—Å–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥—É—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –ø–æ–π–¥—É—Ç –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ü•∞\n\n<b>–ü–æ–º–µ—â–∞–π –≤–µ—â–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –Ω–∞—Ö–æ–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä—è–¥–æ–º —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π, –≤–≤–æ–¥–∏ –µ–≥–æ –≤ —á–∞—Ç-–±–æ—Ç –∏ –ø–æ–ª—É—á–∞–π –∏–≥—Ä–æ–≤—ã–µ –±–∞–ª–ª—ã!</b>`

            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnTasks error', e)
        }
    }
}