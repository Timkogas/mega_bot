import TelegramBot, { CallbackQuery, InlineKeyboardButton, Message } from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import Logger from '../Logger/Logger';
import path from 'path';
import Helper from './Helper';
import { IUserDb } from '../Db/IUserDb';

dotenv.config();
process.env["NTBA_FIX_350"] = '1';

enum EMessages {
    START = 'menu',
    MENU = 'menu',
    ABOUT = 'about',
    NOT_WANTED = 'not_wanted'
}

export default class TelegramBotApp {
    private bot: TelegramBot;

    constructor() {
        this._init()
    }

    private async _init(): Promise<void> {
        const token = process.env.TG_TOKEN
        try {
            this.bot = await new TelegramBot(token, { polling: true });
            Logger.debug('[BOT] started')
        } catch (e) {
            Logger.error('[BOT] started error', e)
        }
        this._setupListeners();
    }

    private _setupListeners(): void {
        try {
            this.bot.on('message', async (msg) => {
                const tgUser = msg.from
                const dbUser = await Helper.checkUser(tgUser)

                const text = msg.text
                const chatId = msg.chat.id

                if (text.includes('/start')) {
                    return await this._sendMessageOnStart(chatId, dbUser)
                }

                return await this._sendMessageOnNoCommand(chatId, dbUser)
            })


            this.bot.on('callback_query', async (callbackQuery) => this._handleCallbackQuery(callbackQuery));
        } catch (e) {
            Logger.error('[BOT] setupListeners error', e)
        }
    }

    private async _handleCallbackQuery(callbackQuery: CallbackQuery): Promise<void> {
        const { data, message } = callbackQuery;
    }


    private async _sendMessageOnNoCommand(chatId: number, dbUser: IUserDb,): Promise<Message> {
        try {
            const text = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.`
            const buttons = await Helper.getButtons(dbUser.id)
            if (buttons === null) {
                return await this.bot.sendMessage(chatId, text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [[{ text: '–°—Ç–∞—Ä—Ç', callback_data: EMessages.START }]],
                    }
                })
            } else {
                return await this.bot.sendMessage(chatId, text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: buttons,
                    }
                })
            }
        } catch (e) {
            Logger.error('[BOT] sendMessageOnNoCommand error', e)
        }
    }

    private async _sendMessageOnStart(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/video/video1.mp4')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)', callback_data: EMessages.MENU }],
                [{ text: '–û–± –∞–∫—Ü–∏–∏', callback_data: EMessages.ABOUT }],
                [{ text: '–ù–µ —Ö–æ—á—É', callback_data: EMessages.NOT_WANTED }]
            ]

            const textFirstMessage = `üëãüèª –ü—Ä–∏–≤–µ—Ç!\n\n–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –≤ –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å ‚Äî –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —ç–∫–æ-–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, —Ä–∞—Å–∫—Ä–æ–π –≤—Å–µ —Ç–∞–π–Ω—ã —ç–∫–æ–ø–æ–ª–∏—Å–∞ –∏ <b>–ø–æ–ª—É—á–∏ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—É—Ç–µ–≤–∫—É –Ω–∞ –¥–≤–æ–∏—Ö –≤ —ç–∫–æ-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –£—Ä–∞–ª—É</b>, –∞ —Ç–∞–∫–∂–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ üíö`
            const textSecondMessage = `‚úÖ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–ª–µ–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è <a href='https://mega.ru/loyalty_rules/ekaterinburg/?att=1'>–ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ MEGA Friends</a> –∏ <a href='https://mega.ru/loyalty_rules/ekaterinburg/?att=1'>–ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ü–∏–∏</a>.`
            
            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendMessage(chatId, textFirstMessage, { parse_mode: 'HTML' })
            await this.bot.sendMessage(chatId, textSecondMessage, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)

            return
        } catch (e) {
            Logger.error('[BOT] sendMessageOnStart error', e)
        }
    }

}