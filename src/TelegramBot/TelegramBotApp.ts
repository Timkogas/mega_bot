import TelegramBot, { CallbackQuery, InlineKeyboardButton, InputMediaPhoto, Message } from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import Logger from '../Logger/Logger';
import path from 'path';
import Helper from './Helper';
import { EActivity, IUserDb } from '../Db/IUserDb';

dotenv.config();
process.env["NTBA_FIX_350"] = '1';

export enum EMessages {
    START = 'start',
    START_SHORT = 'start_short',
    MENU = 'menu',
    ABOUT = 'about',
    NOT_WANTED = 'not_wanted',

    TASKS = 'tasks',
    INVITE = 'invite',
    PRIZES = 'prizes',

    TASK_1 = 'task_1',
    TASK_2 = 'task_2',
    TASK_3 = 'task_3',
    TASK_4 = 'task_4',
    TASK_5 = 'task_5',

    WHERE_STATION = 'where_station',
    WRITE_CODE = 'write_code',
    SKIP_TASK = 'skip_task',
    SKIP_CONFIRM = 'skip_confirm',
    PROBLEM = 'problem',
    PROBLEM_CONFIRM = 'problem_confirm',

    SUBSCRIBE = 'subscribe',
    SUBSCRIBE_CHECK = "subscribe_check",
    SUBSCRIBE_CONFIRM = "subscribe_confirm",
    SUBSCRIBE_ERROR = "subscribe_error",

    WHERE_MASTERS = "where_masters",

    AUTHORIZATION = 'authorization',
    AUTHORIZATION_CONFIRM = 'authorization_confirm',
    AUTHORIZATION_WRITE = 'authorization_write',
    AUTHORIZATION_SKIP = ' authorization_skip',
    AUTHORIZATION_GUIDE = 'authorization_guide',
    AUTHORIZATION_INCORRECT = 'authorization_incorrect',

    CODE_INCORRECT = 'code_incorrect',
    // –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ callback_query
    TASK_1_CORRECT = 'task_1_correct',
}

export const taskIdToEMessagesMap = {
    1: EMessages.TASK_1,
    2: EMessages.TASK_2,
    3: EMessages.TASK_3,
    4: EMessages.TASK_4,
    5: EMessages.TASK_5,
};

export default class TelegramBotApp {
    private bot: TelegramBot;

    constructor() {
        this._init()
    }

    private _init(): void {
        const token = process.env.TG_TOKEN
        try {
            this.bot = new TelegramBot(token, { polling: true });
            Logger.debug('[BOT] started')
        } catch (e) {
            Logger.error('[BOT] started error', e)
        }
        this._setupListeners();
    }

    private _setupListeners(): void {
        try {
            this.bot.on('message', async (message) => {
                const tgUser = message?.from
                const dbUser = await Helper.checkUser(tgUser)
                const text = message?.text
                const chatId = message?.chat?.id

                if (text.includes('/start')) {

                    const textArr = text?.split(' ')
                    if (textArr.length === 2) {
                        if (/^\d+$/.test(textArr[1])) {
                            Helper.checkReferral(dbUser, Number(textArr[1]), this.bot)
                        } else {
                            Logger.debug('stats')
                        }


                    }
                    return await this._sendMessageOnStart(chatId, dbUser)
                }

                switch (dbUser.activity) {
                    case EActivity.BUTTONS:
                        return await this._sendMessageOnNoCommand(chatId, dbUser)
                    case EActivity.CODE:
                        const checkCode = Helper.checkCode(text)

                        if (checkCode) {
                            return await this._sendMessageOnTaskCorrect(chatId, dbUser)
                        } else {
                            return await this._sendMessageOnCodeIncorrect(chatId, dbUser)
                        }
                    case EActivity.PROBLEM:
                        return await this._sendMessageOnProblemConfirm(chatId, dbUser)
                    case EActivity.AUTHORIZATION:
                        const checkAuthorization = Helper.checkCode(text)

                        if (checkAuthorization) {
                            return await this._sendMessageOnAuthorizationConfirm(chatId, dbUser)
                        } else {
                            return await this._sendMessageOnAuthorizationIncorrect(chatId, dbUser)
                        }
                }
            })


            this.bot.on('callback_query', async (callbackQuery) => this._handleCallbackQuery(callbackQuery));
        } catch (e) {
            Logger.error('[BOT] setupListeners error', e)
        }
    }

    private async _handleCallbackQuery(callbackQuery: CallbackQuery): Promise<void> {
        const { data, message, from } = callbackQuery;

        const tgUser = from
        const dbUser = await Helper.checkUser(tgUser)
        await Helper.changeUserActivity(dbUser.id, EActivity.BUTTONS)

        const chatId = message?.chat?.id

        switch (data) {
            case EMessages.START:
                return await this._sendMessageOnStart(chatId, dbUser)
            case EMessages.START_SHORT:
                return await this._sendMessageOnStart(chatId, dbUser, true)
            case EMessages.ABOUT:
                return await this._sendMessageOnAbout(chatId, dbUser)
            case EMessages.NOT_WANTED:
                return await this._sendMessageOnNotWanted(chatId, dbUser)
            case EMessages.MENU:
                return await this._sendMessageOnMenu(chatId, dbUser)
            case EMessages.PRIZES:
                return await this._sendMessageOnPrizes(chatId, dbUser)
            case EMessages.INVITE:
                return await this._sendMessageOnInvite(chatId, dbUser)
            case EMessages.TASKS:
                return await this._sendMessageOnTasks(chatId, dbUser)
            case EMessages.TASK_1:
                return await this._sendMessageOnTaskOne(chatId, dbUser)
            case EMessages.SUBSCRIBE:
                return await this._sendMessageOnSubscribe(chatId, dbUser)
            case EMessages.SUBSCRIBE_CHECK:
                return await this._sendMessageSubscribeCheck(chatId, dbUser)
            case EMessages.SUBSCRIBE_CONFIRM:
                return await this._sendMessageSubscribeConfirm(chatId, dbUser)
            case EMessages.SUBSCRIBE_ERROR:
                return await this._sendMessageSubscribeError(chatId, dbUser)
            case EMessages.WHERE_STATION:
                return await this._sendMessageOnWhereStation(chatId, dbUser)
            case EMessages.WRITE_CODE:
                return await this._sendMessageOnWriteCode(chatId, dbUser)
            case EMessages.SKIP_TASK:
                return await this._sendMessageOnSkipTask(chatId, dbUser)
            case EMessages.SKIP_CONFIRM:
                return await this._sendMessageOnSkipConfirm(chatId, dbUser)
            case EMessages.PROBLEM:
                return await this._sendMessageOnProblem(chatId, dbUser)
            case EMessages.CODE_INCORRECT:
                return await this._sendMessageOnCodeIncorrect(chatId, dbUser)
            case EMessages.TASK_2:
                return await this._sendMessageOnTaskTwo(chatId, dbUser)
            case EMessages.WHERE_MASTERS:
                return await this._sendMessageOnWhereMasters(chatId, dbUser)
            case EMessages.AUTHORIZATION:
                return await this._sendMessageOnAuthorization(chatId, dbUser)
            case EMessages.AUTHORIZATION_GUIDE:
                return await this._sendMessageOnAuthorizationGuide(chatId, dbUser)
            case EMessages.AUTHORIZATION_SKIP:
                return await this._sendMessageOnAuthorizationSkip(chatId, dbUser)
            case EMessages.AUTHORIZATION_WRITE:
                return await this._sendMessageOnAuthorizationWrite(chatId, dbUser)
            case EMessages.AUTHORIZATION_INCORRECT:
                return await this._sendMessageOnAuthorizationIncorrect(chatId, dbUser)
        }
    }


    private async _sendMessageOnNoCommand(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const text = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.`
            const buttons = await Helper.getButtons(dbUser.id)

            if (buttons === null) {
                await this.bot.sendMessage(chatId, text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [[{ text: '–°—Ç–∞—Ä—Ç', callback_data: EMessages.START }]],
                    }
                })
            } else {
                await this.bot.sendMessage(chatId, text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: buttons,
                    }
                })
            }

        } catch (e) {
            Logger.error('[BOT] sendMessageOnNoCommand error', e)
        }
    }

    private async _sendMessageOnStart(chatId: number, dbUser: IUserDb, short?: boolean): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)', callback_data: EMessages.MENU }],
                [{ text: '–û–± –∞–∫—Ü–∏–∏', callback_data: EMessages.ABOUT }],
                [{ text: '–ù–µ —Ö–æ—á—É', callback_data: EMessages.NOT_WANTED }]
            ]

            const textFirstMessage = `üëãüèª –ü—Ä–∏–≤–µ—Ç!\n\n–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –≤ –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å ‚Äî –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —ç–∫–æ-–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, —Ä–∞—Å–∫—Ä–æ–π –≤—Å–µ —Ç–∞–π–Ω—ã —ç–∫–æ–ø–æ–ª–∏—Å–∞ –∏ <b>–ø–æ–ª—É—á–∏ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—É—Ç–µ–≤–∫—É –Ω–∞ –¥–≤–æ–∏—Ö –≤ —ç–∫–æ-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –£—Ä–∞–ª—É</b>, –∞ —Ç–∞–∫–∂–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ üíö`
            const textSecondMessage = `‚úÖ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–ª–µ–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è <a href='https://mega.ru/loyalty_rules/ekaterinburg/?att=1'>–ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ MEGA Friends</a> –∏ <a href='https://mega.ru/loyalty_rules/ekaterinburg/?att=1'>–ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ü–∏–∏</a>.`

            if (short) {
                await this.bot.sendMessage(chatId, textSecondMessage, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        inline_keyboard: buttons,
                    }
                })
            } else {
                await this.bot.sendVideo(chatId, videoPath)
                await this.bot.sendMessage(chatId, textFirstMessage, { parse_mode: 'HTML' })
                await this.bot.sendMessage(chatId, textSecondMessage, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true,
                    reply_markup: {
                        inline_keyboard: buttons,
                    }
                })
            }

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnStart error', e)
        }
    }


    private async _sendMessageOnAbout(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')
            const imgPath = path.join(__dirname, '../assets/images/img1.jpg')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.START_SHORT }],
            ]

            const text = `üåç <b>¬´–ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å¬ª</b> ‚Äî –∞–∫—Ü–∏—è –æ—Ç –ú–ï–ì–ò –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ø–æ—Å–≤—è—â–µ–Ω–Ω–∞—è –∑–∞–±–æ—Ç–µ –æ –ø–ª–∞–Ω–µ—Ç–µ –∏ –ª—é–¥—è—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã, —É—Å–ª—É–≥–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –≤ —Ü–µ–Ω—Ç—Ä–∞—Ö.\n\n–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–π –∞–∫—Ü–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 5 –∑–∞–¥–∞–Ω–∏–π:\n1. –ó–∞–¥–∞–Ω–∏–µ 1. –†–∞–∑–¥–µ–ª—è–π —Å –ú–ï–ì–û–ô\n2. –ó–∞–¥–∞–Ω–∏–µ 2. –ú–ï–ì–ê –ú–µ—Å—Ç–æ\n3. –ó–∞–¥–∞–Ω–∏–µ 3. –ú–ï–ì–ê –°—Ç–∞–Ω—Ü–∏—è\n4. –ó–∞–¥–∞–Ω–∏–µ 4. –ú–ï–ì–ê –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n5. –ó–∞–¥–∞–Ω–∏–µ 4. –ú–ï–ì–ê –≠–∫–æ —à–æ–ø–∏–Ω–≥\n\n–ó–∞ –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∏–≥—Ä–æ–≤—ã–µ –±–∞–ª–ª—ã. –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –∏ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ <a href='https://ru.wikipedia.org/wiki/%D0%A1%D1%81%D1%8B%D0%BB%D0%BA%D0%B0'>–ø—Ä–∞–≤–∏–ª–∞–º–∏ –∞–∫—Ü–∏–∏.</a>\n\n<i>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∞–∫—Ü–∏–∏ ‚Äî –û–û–û ¬´–Æ—Ä–ª–∏—Ü–æ¬ª. –†–µ–∫–≤–∏–∑–∏—Ç—ã</i>\n\n¬© –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã`

            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendPhoto(chatId, imgPath, {
                caption: text,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnAbout error', e)
        }
    }

    private async _sendMessageOnNotWanted(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)', callback_data: EMessages.MENU }],
                [{ text: '–û–± –∞–∫—Ü–∏–∏', callback_data: EMessages.ABOUT }],
                [{ text: '–ù–µ —Ö–æ—á—É', callback_data: EMessages.NOT_WANTED }],
            ]

            const text = `–í –Ω–∞—à–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ. –¢—ã –º–æ–∂–µ—à—å <b>–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%81%D1%8B%D0%BB%D0%BA%D0%B0">–ø—Ä–∞–≤–∏–ª–∞–º–∏</a></b> –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ: –∏–≥—Ä–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç üßê\n\nüîí <b>–£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º.</b> –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å —á–∞—Ç-–±–æ—Ç–æ–º ¬´–î–æ–≤–µ—Ä—å—Å—è –ú–ï–ì–ï. –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –≤ –≠–∫–æ–ø–æ–ª–∏—Å¬ª, –≤ –ø–æ–ª—å–∑—É —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü.`

            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnNotWanted error', e)
        }
    }

    private async _sendMessageOnMenu(chatId: number, dbUser: IUserDb): Promise<void> {
        try {

            let taskData
            const hasTasks = await Helper.getHasPendingTask(dbUser.id)

            if (hasTasks) {
                taskData = await Helper.getLastPendingTask(dbUser.id)
            }


            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ó–∞–¥–∞–Ω–∏—è', callback_data: hasTasks ? taskData.type : EMessages.TASKS }],
                [{ text: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data: EMessages.INVITE }],
                [{ text: '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤', web_app: { url: 'https://ya.ru' } }],
                [{ text: '–ü—Ä–∏–∑—ã', callback_data: EMessages.PRIZES }],
            ]

            const text = `‚úåÔ∏è<b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å!</b>\n\n–≠—Ç–æ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —á–∞—Ç-–±–æ—Ç—É. –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π. <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–¥–∞–Ω–∏—è¬ª üëá</b>\n\n–¢—ã –º–æ–∂–µ—à—å <b>–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π</b> ‚Äì –≤–º–µ—Å—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –ø—Ä–æ—Å—Ç–æ—Ä–∞–º –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å–∞ –≤–µ—Å–µ–ª–µ–µ! –ê —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏ —Å–∫–æ–ª—å–∫–æ –Ω–∞–±–∏—Ä–∞–µ—Ç –±–∞–ª–ª–æ–≤, –æ–±—Ä–∞—â–∞–π—Å—è –∫ ¬´–¢–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤¬ª.\n\n–î–æ–≤–µ—Ä—å—Å—è –ú–ï–ì–ï! üíï`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnMenu error', e)
        }
    }

    private async _sendMessageOnPrizes(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∞–∫—Ü–∏–∏ ¬´–ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å¬ª —Å–º–æ–≥—É—Ç –ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚Äî <b>—Å–∫–∞–∑–æ—á–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ –∏ —ç–∫–æ-—Ç—É—Ä –ø–æ –£—Ä–∞–ª—É –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏</b> ‚õ∞Ô∏èüå≤‚ùÑÔ∏è\n\n–¢–æ–ø-50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã:\n‚óè –ü—Ä–∏–∑1\n‚óè –ü—Ä–∏–∑2\n‚óè –ü—Ä–∏–∑3\n‚óè –ü—Ä–∏–∑4\n‚óè –ü—Ä–∏–∑5\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏ –ø—Ä–∏–∑–µ—Ä—ã –±—É–¥—É—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±—ä—è–≤–ª–µ–Ω—ã 23 –¥–µ–∫–∞–±—Ä—è –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–º –∫–æ–Ω—Ü–µ—Ä—Ç–µ –≤ –ú–ï–ì–ï —Å —É—á–∞—Å—Ç–∏–µ–º –Ω–∞—à–µ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ ‚Äì –ú–∞—Ä–∏—Ç—ã –ü–ª–∏–µ–≤–æ–π.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∏ —á–∞—Ç-–±–æ—Ç–µ!`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnPrizes error', e)
        }
    }

    private async _sendMessageOnInvite(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `<b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –≤ –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É!\n\n–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\nüëâüèª <b>–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–∑—å—è–º.</b> –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–µ –±–æ–ª–µ–µ 10 —á–µ–ª–æ–≤–µ–∫;\nüëâüèª –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –∏–∑ –¥—Ä—É–∑–µ–π –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, —Ç–µ–±–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>5 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.</b>\n\n–í–æ—Ç —Å—Å—ã–ª–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π:\n<code>http://t.me/mega_ekb_bot?start=${dbUser.id}</code>`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnInvite error', e)
        }
    }

    private async _sendMessageOnTasks(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')
            const taskData = await Helper.getLastPendingTask(dbUser.id)

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ö—Ä—É—Ç–æ! –£—á–∞—Å—Ç–≤—É—é!', callback_data: taskData.type }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `ü§ï –ï–∂–µ–≥–æ–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –†–æ—Å—Å–∏–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è —Å–≤–∞–ª–æ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 250 000 –≥–µ–∫—Ç–∞—Ä–æ–≤! –°–æ—Ä—Ç–∏—Ä—É—è –∏ —Å–¥–∞–≤–∞—è –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏ –æ—Ç—Ö–æ–¥—ã, —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Å–æ—Ä–∞ –∏ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –∑–∞–±–æ—Ç–µ –æ –Ω–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç–µ.\n\n–ú–ï–ì–ê –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–µ —Å –ù–µ–º—É–∑–µ–µ–º –º—É—Å–æ—Ä–∞ –æ—Ç–∫—Ä—ã–ª–∞ —Å—Ç–∞–Ω—Ü–∏—é –ø–æ –ø—Ä–∏–µ–º—É –≤—Ç–æ—Ä—Å—ã—Ä—å—è. –ï—Å–ª–∏ —Ç—ã —É–∂–µ —Å–æ—Ä—Ç–∏—Ä—É–µ—à—å –æ—Ç—Ö–æ–¥—ã –¥–æ–º–∞, –ø—Ä–∏–Ω–æ—Å–∏ –∏—Ö –Ω–∞ –Ω–∞—à—É —Å—Ç–∞–Ω—Ü–∏—é. –ï—Å–ª–∏ —Ç—ã —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∏—á–æ–∫ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ: –≤—ã–¥–µ–ª–∏ —Ö–æ—Ç—è –±—ã 1 —Ñ—Ä–∞–∫—Ü–∏—é –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞ –∏–ª–∏ –ü–≠–¢-–±—É—Ç—ã–ª–∫–∏ –∏–∑-–ø–æ–¥ –≤–æ–¥—ã) –∏ –ø–æ–º–µ—Å—Ç–∏ –¥–∞–Ω–Ω—É—é —Ñ—Ä–∞–∫—Ü–∏—é –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏.\n\n–ê –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –æ–¥–µ–∂–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–∫–∏–Ω—É—Ç—å, —Ç–æ —Ç–µ–±–µ —Ç–æ—á–Ω–æ <b>–Ω—É–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏—é —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞</b>. –í—Å–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥—É—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –ø–æ–π–¥—É—Ç –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ü•∞\n\n<b>–ü–æ–º–µ—â–∞–π –≤–µ—â–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –Ω–∞—Ö–æ–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä—è–¥–æ–º —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π, –≤–≤–æ–¥–∏ –µ–≥–æ –≤ —á–∞—Ç-–±–æ—Ç –∏ –ø–æ–ª—É—á–∞–π –∏–≥—Ä–æ–≤—ã–µ –±–∞–ª–ª—ã!</b>`

            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnTasks error', e)
        }
    }

    private async _sendMessageOnTaskOne(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const imgPath = path.join(__dirname, '../assets/images/img1.jpg')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–í–≤–µ—Å—Ç–∏ –∫–æ–¥', callback_data: EMessages.WRITE_CODE }],
                [{ text: '–ì–¥–µ –Ω–∞–π—Ç–∏ —Å—Ç–∞–Ω—Ü–∏—é?', callback_data: EMessages.WHERE_STATION }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.SKIP_TASK }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `<b>–ó–∞–¥–∞–Ω–∏–µ #1. –ü—Ä–∏–Ω–µ—Å–∏ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ç–µ–±—è —Ä–∞–¥–æ–≤–∞—Ç—å –≤ –±–æ–∫—Å—ã –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ—â–µ–π –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ ¬´–†–∞–∑–¥–µ–ª—è–π —Å –ú–ï–ì–û–ô¬ª</b>\n\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–¥–∞—Ç—å:\n‚óè –ú–µ–ª–∫—É—é –±—ã—Ç–æ–≤—É—é —Ç–µ—Ö–Ω–∏–∫—É;\n‚óè –ö–∞—Ä—Ç–æ–Ω –∏ –±—É–º–∞–≥—É (‚ô≤20, ‚ô≤21, ‚ô≤22, PAP)\n‚óè –ú–µ—Ç–∞–ª–ª, –∞–ª—é–º–∏–Ω–∏–π, —Ñ–æ–ª—å–≥—É (‚ô≤40, ‚ô≤41, FE, ALU);\n‚óè –û–¥–µ–∂–¥—É –∏ —Ç–µ–∫—Å—Ç–∏–ª—å;\n‚óè –°—Ç–µ–∫–ª–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ (‚ô≤70, ‚ô≤71, ‚ô≤72, ‚ô≤73, GL);\n‚óè –°—Ç–µ–∫–ª–æ –∑–µ–ª—ë–Ω–æ–µ (‚ô≤70, ‚ô≤71, ‚ô≤72, ‚ô≤73, GL);\n‚óè –°—Ç–µ–∫–ª–æ –∫–æ—Ä–∏—á–Ω–µ–≤–æ–µ (‚ô≤70, ‚ô≤71, ‚ô≤72, ‚ô≤73, GL);\n‚óè –¢–µ—Ç—Ä–∞ –ø–∞–∫ (‚ô≤81, ‚ô≤82, ‚ô≤84, TETRA PAK, PUREPAC);\n‚óè –ü–ª–∞—Å—Ç–∏–∫ –º—è–≥–∫–∏–π, –ø–∞–∫–µ—Ç—ã –∏ –∫—É–ª—å–∫–∏ (‚ô≤2, ‚ô≤4, ‚ô≤5, HDPE, PEHT, PEHD, LDPE, PP);\n‚óè –ü–ª–∞—Å—Ç–∏–∫ —Ç–≤–µ—Ä–¥—ã–π (‚ô≤2, ‚ô≤4, ‚ô≤5, ‚ô≤6, HDPE, PEHD, LDPE, PELD, PP, PS);\n‚óè –ü–ª–∞—Å—Ç–∏–∫ –ü–≠–¢ –Ω–µ –±—É—Ç—ã–ª–∫–∏ (‚ô≤1, PET, PETE, PET-R);\n‚óè –ü–≠–¢-–±—É—Ç—ã–ª–∫–∏ (‚ô≤1, PET, PETE, PET-R);\n‚óè –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –∫—Ä—ã—à–∫–∏ (‚ô≤2, ‚ô≤4, HDPE, PEHD, LDPE, PELD)\n\n–ü–æ–º–µ—Å—Ç–∏ –≤–µ—â–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –Ω–∞–π–¥–∏ <b>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä—è–¥–æ–º —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π –∏ –≤–≤–µ–¥–∏ –µ–≥–æ –≤ —á–∞—Ç-–±–æ—Ç</b>, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–∞–ª–ª—ã. –£–¥–∞—á–∏!`

            await this.bot.sendPhoto(chatId, imgPath, {
                caption: text,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnTaskOne error', e)
        }
    }

    private async _sendMessageOnTaskCorrect(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            let videoPath
            let text
            let buttons: InlineKeyboardButton[][]

            const task = await Helper.getLastPendingTask(dbUser.id)
            await Helper.confirmLastTask(dbUser.id)
            await Helper.addPointsToUser(dbUser, 10)
            await this._sendMessageOnReferralComplete(dbUser)
            await Helper.changeUserActivity(dbUser.id, EActivity.BUTTONS)

            switch (task.type) {
                case EMessages.TASK_1:
                    buttons = [
                        [{ text: '–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.SUBSCRIBE }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
                    ]
                    text = `<b>–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç.</b> –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –≤–∫–ª–∞–¥ –≤ –∑–∞–±–æ—Ç—É –æ –ø–ª–∞–Ω–µ—Ç–µ –∏ –ª—é–¥—è—Ö! ‚òòÔ∏è\n\n–ù–∞ —Ç–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Å—á–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>10 –±–∞–ª–ª–æ–≤</b>. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ò–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ?`
                    videoPath = path.join(__dirname, '../assets/videos/video1.mp4')
                    break;
                case EMessages.TASK_2:
                    buttons = [
                        [{ text: '–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.AUTHORIZATION }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
                    ]
                    text = `<b>–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç.</b> –ù–∞–¥–µ–µ–º—Å—è, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å! üòç\n\n–ù–∞ —Ç–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Å—á–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>10 –±–∞–ª–ª–æ–≤</b>.\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ò–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ?`
                    videoPath = path.join(__dirname, '../assets/videos/video1.mp4')
                    break;
                case EMessages.TASK_3:
                    break;
                case EMessages.TASK_4:
                    break;
                case EMessages.TASK_5:
                    break;
            }


            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnTaskOne error', e)
        }
    }

    private async _sendMessageOnCodeIncorrect(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            await Helper.changeUserActivity(dbUser.id, EActivity.BUTTONS)

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑', callback_data: EMessages.WRITE_CODE }],
                [{ text: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', callback_data: EMessages.PROBLEM }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: EMessages.SKIP_TASK }],
            ]
            const text = `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. <b>–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â–µ —Ä–∞–∑</b> –∏–ª–∏ —Å–æ–æ–±—â–∏ –Ω–∞–º –æ –ø—Ä–æ–±–ª–µ–º–µ.`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnTaskOne error', e)
        }
    }

    private async _sendMessageOnWhereStation(chatId: number, dbUser: IUserDb): Promise<void> {
        try {

            const imgPath = path.join(__dirname, '../assets/images/img1.jpg')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–í–≤–µ—Å—Ç–∏ –∫–æ–¥', callback_data: EMessages.WRITE_CODE }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.SKIP_TASK }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.TASK_1 }],
            ]

            const text = `<b>–°—Ç–∞–Ω—Ü–∏—è ¬´–†–∞–∑–¥–µ–ª—è–π —Å –ú–ï–ì–û–ô¬ª</b> —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–∞ –≤–Ω–µ—à–Ω–µ–π –ø–∞—Ä–∫–æ–≤–∫–µ, —Å—Ç–æ–ª–±–∏–∫ –ë1. –ö –Ω–µ–π —É–¥–æ–±–Ω–æ –ø–æ–¥—ä–µ—Ö–∞—Ç—å –Ω–∞ –º–∞—à–∏–Ω–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —É–ª–∏—Ü—ã –ú–µ—Ç–∞–ª–ª—É—Ä–≥–æ–≤ –∏ —Å—Ä–∞–∑—É –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –æ—Ç—Ö–æ–¥—ã.`

            await this.bot.sendPhoto(chatId, imgPath, {
                caption: text,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnWhereStation error', e)
        }
    }

    private async _sendMessageOnWriteCode(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            await Helper.changeUserActivity(dbUser.id, EActivity.CODE)
            const task = await Helper.getLastPendingTask(dbUser.id)

            let buttons: InlineKeyboardButton[][]

            switch (task.type) {
                case EMessages.TASK_1:
                    buttons = [
                        [{ text: '–ì–¥–µ –Ω–∞–π—Ç–∏ —Å—Ç–∞–Ω—Ü–∏—é?', callback_data: EMessages.WHERE_STATION }],
                        [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.SKIP_TASK }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
                    ]
                    break;
                case EMessages.TASK_2:
                    buttons = [
                        [{ text: '–ì–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã?', callback_data: EMessages.WHERE_MASTERS }],
                        [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.SKIP_TASK }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
                    ]
                    break;
                case EMessages.TASK_3:
                    buttons = [
                        [{ text: '–ì–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã?', callback_data: EMessages.WHERE_MASTERS }],
                        [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.SKIP_TASK }],
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
                    ]
                    break;
            }

            const text = `–í–≤–µ–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∏–∂–µ üëáüèª (1 - correct)`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnWriteCode error', e)
        }
    }

    private async _sendMessageOnSkipTask(chatId: number, dbUser: IUserDb): Promise<void> {
        try {

            const taskData = await Helper.getLastPendingTask(dbUser.id)

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–î–∞, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: EMessages.SKIP_CONFIRM }],
                [{ text: '–ù–µ—Ç, –±—É–¥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å', callback_data: taskData.type }],
            ]

            const text = `–¢—ã —É–≤–µ—Ä–µ–Ω(–∞), —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ? –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –Ω–µ –Ω–∞—á–∏—Å–ª–∏–º —Ç–µ–±–µ –±–∞–ª–ª—ã, –∏ <b>—à–∞–Ω—Å—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑ —É–º–µ–Ω—å—à–∞—Ç—Å—è</b>üòî`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnSkipTask error', e)
        }
    }

    private async _sendMessageOnSkipConfirm(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const taskData = await Helper.getLastPendingTask(dbUser.id)
            await Helper.confirmLastTask(dbUser.id)
            switch (taskData.type) {
                case EMessages.TASK_1:
                    return await this._sendMessageOnSubscribe(chatId, dbUser)
                case EMessages.TASK_2:
                    return await this._sendMessageOnAuthorization(chatId, dbUser)
            }
        } catch (e) {
            Logger.error('[BOT] sendMessageOnSkipConfirm error', e)
        }
    }

    private async _sendMessageOnSubscribe(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const taskData = await Helper.getLastPendingTask(dbUser.id)

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (succes)', callback_data: EMessages.SUBSCRIBE_CONFIRM }],
                [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (error)', callback_data: EMessages.SUBSCRIBE_ERROR }],
                [{ text: '–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.TASK_2 }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å <b>+5 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤?</b> üòä\n–°–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–∏ÃÜ—Å—è –Ω–∞ –Ω–∞—à <a href="https://t.me/megaekat">–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª!</a>\n\n–í –Ω–µ–º —Ç—ã –Ω–∞–∏ÃÜ–¥–µ—à—å –∫—Ä—É—Ç—ã–µ –∏–¥–µ–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ú–ï–ì–ò, —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnSubscribe error', e)
        }
    }

    private async _sendMessageSubscribeCheck(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            // const data = await this.bot.getChatMember('-1001793675054', dbUser.id)
            // console.log(data)
            // const buttons: InlineKeyboardButton[][] = [
            //     [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: EMessages.SUBSCRIBE_CHECK }],
            //     [{ text: '–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.TASK_2 }],
            //     [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            // ]

            // const text = `–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å <b>+5 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤?</b> üòä\n–°–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–∏ÃÜ—Å—è –Ω–∞ –Ω–∞—à <a href="https://t.me/megaekat">–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª!</a>\n\n–í –Ω–µ–º —Ç—ã –Ω–∞–∏ÃÜ–¥–µ—à—å –∫—Ä—É—Ç—ã–µ –∏–¥–µ–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ú–ï–ì–ò, —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!`

            // await this.bot.sendMessage(chatId, text, {
            //     parse_mode: 'HTML',
            //     reply_markup: {
            //         inline_keyboard: buttons,
            //     }
            // })

            // await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageSubscribeCheck error', e)
        }
    }

    private async _sendMessageSubscribeConfirm(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            await Helper.addPointsToUser(dbUser, 5)
            await Helper.updateSubscribeStatus(dbUser.id)

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.TASK_2 }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `–í–∏–¥–∏–º —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É! –°–ø–∞—Å–∏–±–æ!\n\n–õ–æ–≤–∏ <b>+5 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤</b> –Ω–∞ —Å–≤–æ–∏ÃÜ –∏–≥—Ä–æ–≤–æ–∏ÃÜ —Å—á–µ—Ç.`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageSubscribeConfirm error', e)
        }
    }

    private async _sendMessageSubscribeError(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: EMessages.SUBSCRIBE_CHECK }],
                [{ text: '–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.TASK_2 }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤—Å—ë –µ—â–µ –Ω–µ –Ω–∞—à –ø–æ–¥–ø–∏—Å—á–∏–∫. –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ <a href="https://t.me/megaekat">–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª</a> –∏ –∂–º–∏ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageSubscribeError error', e)
        }
    }

    private async _sendMessageOnProblem(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            await Helper.changeUserActivity(dbUser.id, EActivity.PROBLEM)
            let backType
            switch (dbUser?.buttons[0][0]?.callback_data) {
                case EMessages.WRITE_CODE:
                    backType = EMessages.CODE_INCORRECT;
                    break;
                case EMessages.AUTHORIZATION_WRITE:
                    backType = EMessages.AUTHORIZATION_INCORRECT;
                    break;
            }

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ù–∞–∑–∞–¥', callback_data: backType }],
            ]

            const text = `–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç-–±–æ—Ç –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –µ—ë —Ä–µ—à–∏—Ç—å. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—É, –º–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.\n\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –≤ —Ç–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ Telegram –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@nickmane). –ë–µ–∑ –Ω–µ–≥–æ –º—ã –Ω–µ —Å–º–æ–∂–µ–º —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è.`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnProblem error', e)
        }
    }

    private async _sendMessageOnProblemConfirm(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `–û–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–±–µ —Å —Ä–µ—à–µ–Ω–∏–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤.`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnProblemConfirm error', e)
        }
    }

    private async _sendMessageOnReferralComplete(currentUser: IUserDb): Promise<void> {
        try {
            const referralId = currentUser?.referral
            if (referralId > 0) {
                const buttons = await Helper.getButtons(referralId)
                const referralUser = await Helper.getUserById(referralId)
                await Helper.updateSentStatus(currentUser.id)
                if (referralUser && currentUser.sent !== 1) {
                    await Helper.addPointsToUser(referralUser, 5)
                    const text = `–ö—Ç–æ-—Ç–æ –∏–∑ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –ú–ï–ì–ê –≠–∫–æ–ø–æ–ª–∏—Å! –ó–∞ —ç—Ç–æ –º—ã –Ω–∞—á–∏—Å–ª—è–µ–º —Ç–µ–±–µ +5 –±–∞–ª–ª–æ–≤ üòé\n\n–ü—Ä–æ–¥–æ–ª–∂–∏–º?`

                    await this.bot.sendMessage(referralId, text, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: buttons,
                        }
                    })
                }
            }
        } catch (e) {
            Logger.error('[BOT] sendMessageOnReferralComplete error', e)
        }
    }

    private async _sendMessageOnTaskTwo(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–í–≤–µ—Å—Ç–∏ –∫–æ–¥', callback_data: EMessages.WRITE_CODE }],
                [{ text: '–ì–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã?', callback_data: EMessages.WHERE_MASTERS }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.SKIP_TASK }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `<b>–ó–∞–¥–∞–Ω–∏–µ #2. –ú–ï–ì–ê –ú–µ—Å—Ç–æ</b>\n\n–ê–ø—Å–∞–∏ÃÜ–∫–ª–∏–Ω–≥, –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –æ–¥–µ–∂–¥—ã —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –∂–¥–µ—Ç —Ç–µ–±—è –≤ –ú–ï–ì–ê –ú–µ—Å—Ç–µ!\n\n<b>–ó–∞–ø–∏—Å—ã–≤–∞–∏ÃÜ—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –≤ –ú–ï–ì–ï, –ø—Ä–∏–º–∏ —É—á–∞—Å—Ç–∏–µ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º</b> –∏ –ø–æ–ª—É—á–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–∏ÃÜ –∫–æ–¥ –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã.\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –∏ –∑–∞–ø–∏—Å—å: <a href="https://megamesto.ru/">https://megamesto.ru/</a>\n\n–î–æ–≤–µ—Ä—å—Å—è –ú–ï–ì–ï! üëê`

            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnTaskTwo error', e)
        }
    }

    private async _sendMessageOnWhereMasters(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–í–≤–µ—Å—Ç–∏ –∫–æ–¥', callback_data: EMessages.WRITE_CODE }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.SKIP_TASK }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.TASK_2 }],
            ]

            const text = `–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –ú–ï–ì–ê\n{–ú–µ—Å—Ç–æ}`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnWhereMasters error', e)
        }
    }

    private async _sendMessageOnAuthorization(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const videoPath = path.join(__dirname, '../assets/videos/video1.mp4')

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–í–≤–µ—Å—Ç–∏ User ID MEGA Friends', callback_data: EMessages.AUTHORIZATION_WRITE }],
                [{ text: '–ì–¥–µ –Ω–∞–π—Ç–∏ User ID?', callback_data: EMessages.AUTHORIZATION_GUIDE }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: EMessages.AUTHORIZATION_SKIP }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤—ã—Ä–≤–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥! –ú—ã –¥–∞–µ–º —Ç–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b>—É–º–Ω–æ–∂–∏—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã!</b>\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–∏ÃÜ—Å—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–∏ÃÜ—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ MEGA Friends –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ú–ï–ì–ê: <a href='https://clck.ru/36absA'>https://clck.ru/36absA</a>\n\n–ù–∞–∏ÃÜ–¥–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —Å–≤–æ–∏ÃÜ –∫–æ–¥ User ID, –≤–≤–µ–¥–∏ –≤ —á–∞—Ç-–±–æ—Ç –∏ –ø–æ–ª—É—á–∏ <b>–º–Ω–æ–∂–∏—Ç–µ–ª—å x1,5 –±–∞–ª–ª–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–∏ÃÜ!</b> üòØ`

            await this.bot.sendVideo(chatId, videoPath)
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnAuthorization error', e)
        }
    }

    private async _sendMessageOnAuthorizationGuide(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const imgPath1 = path.join(__dirname, '../assets/images/img1.jpg');
            const imgPath2 = path.join(__dirname, '../assets/images/img1.jpg');
            const imgPath3 = path.join(__dirname, '../assets/images/img1.jpg');
            const imgPath4 = path.join(__dirname, '../assets/images/img1.jpg');

            const media: InputMediaPhoto[] = [
                { type: 'photo', media: imgPath1 },
                { type: 'photo', media: imgPath2 },
                { type: 'photo', media: imgPath3 },
                { type: 'photo', media: imgPath4 },
            ];

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–í–≤–µ—Å—Ç–∏ User ID MEGA Friends', callback_data: EMessages.AUTHORIZATION_WRITE }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: EMessages.AUTHORIZATION_SKIP }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.AUTHORIZATION }],
            ]

            const text = `–ò—Ç–∞–∫, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n1. –ü–µ—Ä–µ–∏ÃÜ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ —Å–∫–∞—á–∞–π –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ú–ï–ì–ê –∏ –ø—Ä–æ–∏ÃÜ–¥–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <a href="https://clck.ru/36absA">https://clck.ru/36absA</a>\n\n2. –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ú–ï–ì–ê –Ω–∞–∏ÃÜ–¥–∏ –∫–Ω–æ–ø–∫—É ¬´–¢–≤–æ–∏ÃÜ QR-code¬ª –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–µÃà\n\n3. –ü–æ–¥ QR-–∫–æ–¥–æ–º —Ç—ã —É–≤–∏–¥–∏—à—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–∏ÃÜ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: f0f08565-13e4-47e4-ab75-b a4850611da3\n\n4. –°–∫–æ–ø–∏—Ä—É–∏ÃÜ –∏ –≤–≤–µ–¥–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —á–∞—Ç-–±–æ—Ç, –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ`

            await this.bot.sendMediaGroup(chatId, media)
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnAuthorizationGuide error', e)
        }
    }

    private async _sendMessageOnAuthorizationSkip(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–î–∞, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: EMessages.TASK_3 }],
                [{ text: '–ù–µ—Ç, —Å–µ–π—á–∞—Å –∞–≤—Ç–æ—Ä–∏–∑—É—é—Å—å', callback_data: EMessages.AUTHORIZATION }],
            ]

            const text = `–¢—ã —É–≤–µ—Ä–µ–Ω(–∞), —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ? –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –Ω–µ –Ω–∞—á–∏—Å–ª–∏–º —Ç–µ–±–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –±–∞–ª–ª—ã, –∏ <b>—à–∞–Ω—Å—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑ —É–º–µ–Ω—å—à–∞—Ç—Å—è</b> üòî`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnAuthorizationSkip error', e)
        }
    }

    private async _sendMessageOnAuthorizationWrite(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            await Helper.changeUserActivity(dbUser.id, EActivity.AUTHORIZATION)

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ì–¥–µ –Ω–∞–π—Ç–∏ User ID?', callback_data: EMessages.AUTHORIZATION_GUIDE }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: EMessages.AUTHORIZATION_SKIP }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.AUTHORIZATION }],
            ]

            const text = `–°–∫–æ–ø–∏—Ä—É–∏ÃÜ –∏ –≤–≤–µ–¥–∏ —Å—é–¥–∞ —Å–≤–æ–∏ÃÜ –∫–æ–¥ User ID. (1 - correct)`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnAuthorizationWrite error', e)
        }
    }

    private async _sendMessageOnAuthorizationConfirm(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            await Helper.changeUserActivity(dbUser.id, EActivity.BUTTONS)
            await Helper.updateAuthorizationStatus(dbUser.id)

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: EMessages.TASK_3 }],
                [{ text: '–ù–∞–∑–∞–¥', callback_data: EMessages.MENU }],
            ]

            const text = `–£—Ä–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞—à –ú–ï–ì–ê –î–†–£–ì! <b>–í—Å–µ —Ç–≤–æ–∏ –±—É–¥—É—â–∏–µ –±–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º x1,5</b>\n\n<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n\n–î–æ–ø—É—Å—Ç–∏–º, —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—Ç–æ–∏—Ç 10 –±–∞–ª–ª–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç —Ä–æ–≤–Ω–æ 10 –±–∞–ª–ª–æ–≤. –ê —Ç—ã ‚Äì 10—Ö1,5 = 15 –±–∞–ª–ª–æ–≤!\n\n–ö—Ä—É—Ç–æ –∂–µ? <b>–¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä–∞—Ç—å –≥–ª–∞–≤–Ω—ã–∏ÃÜ –ø—Ä–∏–∑ —Å—Ç–∞–ª–∏ –µ—â–µ –±–ª–∏–∂–µ!</b>`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnAuthorizationCorrect error', e)
        }
    }

    private async _sendMessageOnAuthorizationIncorrect(chatId: number, dbUser: IUserDb): Promise<void> {
        try {
            await Helper.changeUserActivity(dbUser.id, EActivity.BUTTONS)

            const buttons: InlineKeyboardButton[][] = [
                [{ text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑', callback_data: EMessages.AUTHORIZATION_WRITE }],
                [{ text: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', callback_data: EMessages.PROBLEM }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: EMessages.AUTHORIZATION_SKIP }],
            ]

            const text = `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.<b>–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ User ID</b> –∏–ª–∏ —Å–æ–æ–±—â–∏ –Ω–∞–º –æ –ø—Ä–æ–±–ª–µ–º–µ.`

            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons,
                }
            })

            await Helper.setButtons(dbUser, buttons)
        } catch (e) {
            Logger.error('[BOT] sendMessageOnAuthorizationIncorrect error', e)
        }
    }
}